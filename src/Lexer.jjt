options {
    STATIC = false;
    LOOKAHEAD = 2;
}

PARSER_BEGIN(GWBasicParser)

import nodes.IntegerNode;import java.util.Stack;
import java.util.HashSet;
import java.util.HashMap;
import nodes.*;

public class GWBasicParser {
    private Stack<String> whileStack = new Stack<String>();
    private HashSet<String> validLineNumbers = new HashSet<String>();
    private HashSet<String> unresolvedJumps = new HashSet<String>(); //Jump where the linenumbers have not yet been read
    private HashMap<String, String> variables = new HashMap<String, String>(); //variables with types
    private HashSet<String> potentiallyUnassignedVariables = new HashSet<String>(); //Variables used before assignment
    private boolean isAssignmentVar = false; // variable |array | input

    public static void main(String[] args) throws ParseException {
        GWBasicParser parser = new GWBasicParser(System.in);
        SimpleNode root = parser.Program();
        root.dump("");
        System.out.println("Parsing completed successfully.");
    }

    public static void traverse(SimpleNode node) {
        for (int i = 0; i < node.jjtGetNumChildren(); i++) {
            traverse((SimpleNode) node.jjtGetChild(i));
        }
    }

    public static void dumpAST(SimpleNode node, int indentLevel) {
        String indentation = "";

        for (int i = 0; i < indentLevel; i++) {
            indentation += " ";
        }
        System.out.println(indentation + node + (node.jjtGetValue() != null ? " = " + node.jjtGetValue() : ""));
        for (int i = 0; i < node.jjtGetNumChildren(); i++) {
            dumpAST((SimpleNode) node.jjtGetChild(i), indentLevel + 1);
        }
    }

    public static int getLineNumber(SimpleNode node) {
        if (node.toString().equals("Line")) {
            return Integer.parseInt(node.value.toString());
        } else {
            return getLineNumber((SimpleNode) node.jjtGetParent());
        }
    }

    public void checkUnresolvedWhile() throws ParseException {
        if(!whileStack.isEmpty()) {
            throw new ParseException("Code contains " + whileStack.size() + " unclosed while-loops");
        }
    }

    public void checkUnclosedForLoops() throws ParseException {
        for (String lineNumber : unresolvedJumps) {
            if (!validLineNumbers.contains(lineNumber)) {
                throw new ParseException("Jump to invalid line number: " + lineNumber);
            }
        }
    }

    public String getType(String variableName) throws ParseException {
        if(variableName.endsWith("$")) {
            return "STRING";
        } else if (variableName.endsWith("%")) {
            return "INTEGER";
        } else if (variableName.endsWith("#")) {
            return "DOUBLE";
        } else {
            throw new ParseException("Invalid Type of variable " + variableName);
        }
    }

    public void checkPotentiallyFaultyAssignments() throws ParseException {
        for(String key : potentiallyUnassignedVariables) {
            if(variables.containsKey(key) == false) {
                throw new ParseException("Variable " + key + " has not been initialized");
            }
        }
    }
}

PARSER_END(GWBasicParser)

SKIP : {
    " " | "\t" | "\n" | "\r" | "\r\n"
}

TOKEN : {
    < NUMBER: ("-")?(["0"-"9"])+ >
  | < STRING: "\"" (~["\""])* "\"" >
  | < PLUS: "+" >
  | < MINUS: "-" >
  | < MULTIPLY: "*" >
  | < DIVIDE: "/" >
  | < MOD: "%" >
  | < POWER: "**" >
  | < LT: "<" >
  | < GT: ">" >
  | < EQ: "=" >
  | < NEQ: "<>" >
  | < LTE: "<=" >
  | < GTE: ">=" >
  | < LEFTPAREN: "(" >
  | < RIGHTPAREN: ")" >
  | < COMMA: "," >
  | < DIM: "DIM" >
  | < GOTO: "GOTO" >
  | < IF: "IF" >
  | < END: "END" >
  | < THEN: "THEN" >
  | < ELSE: "ELSE" >
  | < FOR: "FOR" >
  | < TO: "TO" >
  | < STEP: "STEP" >
  | < NEXT: "NEXT" >
  | < WHILE: "WHILE" >
  | < WEND: "WEND" >
  | < GOSUB: "GOSUB" >
  | < RETURN: "RETURN" >
  | < STOP: "STOP" >
  | < REM: "REM" (~["\n","\r"])* >
  | < PRINT: "PRINT" >
  | < INPUT: "INPUT" >
  | < IDENTIFIER: (<LETTER>)+ (["0"-"9","A"-"Z","a"-"z"])* >
  | < VARIABLE: (<IDENTIFIER>) ("%" | "$" | "#") >
  | < LETTER: ["A"-"Z","a"-"z"] >
  | < EOL: "\n" | "\r" | "\r\n" >
}

SimpleNode Program() #Program : {}
{
    (( Line() )* ) <EOF>
    {
        checkUnresolvedWhile();
        checkUnclosedForLoops();
        checkPotentiallyFaultyAssignments();
        return jjtThis;
    }
}

void Line() #Line : {Token t;}
{
    t=<NUMBER> Statement() (<EOL> | <EOF>)?
    {
    if(validLineNumbers.contains(t.image)) {
        throw new ParseException ("Linenumber " + t.image + " appears twice in the code");
    }
    validLineNumbers.add(t.image);
    jjtThis.jjtSetValue(t.image);
}
}

void Statement() #Statement : {}
{
    (
      Assignment()
    | DimStatement()
    | GotoStatement()
    | IfStatement()
    | ForStatement()
    | NextStatement()
    | WhileStatement()
    | WendStatement()
    | GosubStatement()
    | ReturnStatement()
    | StopStatement()
    | PrintStatement()
    | InputStatement()
    | RemStatement()
    | FunctionCallStatement()
    | EndStatement()
    )
}

void Assignment() #Assignment : {
    isAssignmentVar = true;
}
{
    VariableAccess() <EQ> Expression()
    {
    }
}

void DimStatement() #DimStatement : {
    isAssignmentVar = true;
}
{
    <DIM> ArrayCall()
    {
    }
}

void GotoStatement() #GotoStatement : { Token t;
}
{
    <GOTO> Number()
    {
        t=getToken(0); //Line of the JUMP
        if (!validLineNumbers.contains(t.image)) {
            unresolvedJumps.add(t.image);
        }
    }
}

void IfStatement() #IfStatement : {}
{
    <IF> Condition() <THEN> Statement() (<ELSE> Statement())?
}

void ForStatement() #ForStatement : {
}
{
    <FOR> Assignment() <TO> Expression() (<STEP> Expression())?
}

void NextStatement() #NextStatement : {
}
{
    <NEXT> Variable()
}

void WhileStatement() #WhileStatement : {}
{
    <WHILE> Condition()
    { whileStack.push("WHILE"); }
}

void WendStatement() #WendStatement : {}
{
    <WEND>
    {
        if(whileStack.isEmpty()) {
            throw new ParseException("WEND without matching while");
        }
        whileStack.pop();
    }
}

void GosubStatement() #GosubStatement : { Token t;
}
{
    <GOSUB> Number()
    {
            t=getToken(0); //Line of the JUMP
            if (!validLineNumbers.contains(t.image)) {
                unresolvedJumps.add(t.image);
            }
    }
}

void ReturnStatement() #ReturnStatement : {}
{
    <RETURN>
}

void StopStatement() #StopStatement : {}
{
    <STOP>
}

void PrintStatement() #PrintStatement : {
}
{
    <PRINT> (String() | Expression()) (PrintItem())*
}

void PrintItem() #PrintItem : {
}
{
    <COMMA> (String() | Expression())
}

void InputStatement() #InputStatement : {
    isAssignmentVar = true;
}
{
    <INPUT> (String() <COMMA>)? VariableAccess()
}

void FunctionCallStatement() #FunctionCallStatement : {
    Token t = new Token();
}
{
    t=<IDENTIFIER> <LEFTPAREN> (Expression() ( <COMMA> Expression() )* )? <RIGHTPAREN> { jjtThis.jjtSetValue(t.image); }
}

void RemStatement() #RemStatement : {}
{
    <REM>
}

void EndStatement() #EndStatement : {}
{
    <END>
}

void Condition() #Condition : {}
{
    Expression() ComparisonOperator() Expression()
}

void ComparisonOperator() #ComparisonOperator : {
    Token t = new Token();
}
{
    (t=<LT> | t=<GT> | t=<EQ> | t=<NEQ> | t=<LTE> | t=<GTE>) { jjtThis.jjtSetValue(t.image); }

}

void VariableAccess() #VariableAccess : {
    Token t = new Token();
}
{
    ( ArrayCall() | Variable() )
    {
    }
}

void ArrayCall() #ArrayCall : {
}
{
    Variable() <LEFTPAREN> Expression() <RIGHTPAREN>
}

void Variable() #Variable : {
    Token t = new Token();
}
{
    t=<VARIABLE>
    {
        if (!isAssignmentVar) {
            if(!variables.containsKey(t.image)) {
                potentiallyUnassignedVariables.add(t.image);
            }
        }
        if (isAssignmentVar) {
            variables.put(t.image, getType(t.image));
        }
        isAssignmentVar = false;
        jjtThis.jjtSetValue(t.image);
    }
}

void Expression() #Expression : {
    Token t = new Token();
}
{
    Term() ( (t=<PLUS> | t=<MINUS>) Term() )*
    {
    }
}

void Term() #Term : {
    Token t = new Token();
}
{
    Factor() ( (t=<MULTIPLY> | t=<DIVIDE> | t=<MOD>) Factor() )* { jjtThis.jjtSetValue(t.image); }
}

void Factor() #Factor : {
    Token t = new Token();
}
{
    Base() ( (t=<POWER>) Base() )* { jjtThis.jjtSetValue(t.image); }
}

void Base() #Base : {
}
{
    (Number() | String() | FunctionCallStatement() | VariableAccess() | <LEFTPAREN> Expression() <RIGHTPAREN>)
}

void Number() #Number : {
    Token t = new Token();
}
{
    t=<NUMBER> {
    jjtThis.jjtSetValue(t.image);
}
}

void String() #String : {
    Token t = new Token();
}
{
    t=<STRING> { jjtThis.jjtSetValue(t.image); }
}